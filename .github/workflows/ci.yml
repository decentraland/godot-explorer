on: [push, pull_request]

name: Test and build CI

jobs: 
  lints:
    name: Check and lints
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - name: Install protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          
      - uses: actions-rs/cargo@v1
        name: cargo check
        with:
          command: check
          args: --manifest-path rust/Cargo.toml
      - uses: actions-rs/cargo@v1
        name: cargo fmt
        with:
          command: fmt
          args: --manifest-path rust/Cargo.toml --all -- --check
      - uses: actions-rs/cargo@v1
        name: cargo clippy
        with:
          command: clippy
          args: --manifest-path rust/Cargo.toml -- -D warnings

  coverage:
    name: Coverage
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          components: llvm-tools-preview

      - uses: Swatinem/rust-cache@v1

      - name: Download grcov
        run: |
          mkdir -p "${HOME}/.local/bin"
          curl -sL https://github.com/mozilla/grcov/releases/download/v0.8.10/grcov-x86_64-unknown-linux-gnu.tar.bz2 | tar jxf - -C "${HOME}/.local/bin"
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Run xtask coverage
        working-directory: rust
        run: cargo xtask coverage

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          files: rust/coverage/*.lcov

  build-win-linux:
    name: Build on Windows and Linux
    if: ${{ github.ref == 'refs/heads/main' }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        rust: [stable]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            rust/target
            rust/Cargo.lock
          key: ${{ matrix.os }}-cargo
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions-rs/cargo@v1
        name: cargo test
        with:
          command: test
          args: --manifest-path rust/Cargo.toml --release 
      - uses: actions-rs/cargo@v1
        name: cargo build
        with:
          command: build
          args: --manifest-path rust/Cargo.toml --release
      - uses: actions/upload-artifact@master
        with:
          name: decentraland-godot-lib-${{ matrix.os }}
          path: |
            rust/target/release/decentraland_godot_lib.dll
            rust/target/release/libdecentraland_godot_lib.so
    
  build-macos:
    name: Build on MacOS
    runs-on: macos-latest
    # if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - uses: actions/checkout@v2
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            rust/target
            rust/Cargo.lock
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Set up target platform
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
      - name: Install protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions-rs/cargo@v1
        name: build for x86_64
        with:
          command: build
          args: --manifest-path rust/Cargo.toml --release --target=x86_64-apple-darwin
          
      - uses: actions-rs/cargo@v1
        name: build for arm64
        with:
          command: build
          args: --manifest-path rust/Cargo.toml --release --target=aarch64-apple-darwin

      - name: Make universal library
        run: |
          lipo -create rust/target/x86_64-apple-darwin/release/libdecentraland_godot_lib.dylib  rust/target/aarch64-apple-darwin/release/libdecentraland_godot_lib.dylib -output godot/lib/libdecentraland_godot_lib.dylib
      - uses: actions/upload-artifact@master
        with:
          name: decentraland-godot-lib-${{ runner.os }}
          path: rust/target/godot/lib/libdecentraland_godot_lib.dylib
    
  export:
    name: Export
    needs: [build-win-linux, build-macos]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - uses: actions/checkout@v2
      - name: Download lipo
        run: |
          curl -L -o /tmp/lipo https://github.com/konoui/lipo/releases/latest/download/lipo_Linux_amd64
          chmod +x /tmp/lipo
          sudo mv /tmp/lipo /usr/local/bin
          
      - name: Download linux lib artifact
        uses: actions/download-artifact@master
        with:
          name: decentraland-godot-lib-ubuntu-latest
          path: godot/lib
          
      - name: Download windows lib artifact 
        uses: actions/download-artifact@master
        with:
          name: decentraland-godot-lib-windows-latest
          path: godot/lib

      - name: mkdir macos artifacts dest_path
        run: |
          mkdir godot/lib/aarch64-apple-darwin || true
          mkdir godot/lib/x86_64-apple-darwin || true
          
      - name: Download macos aarch64 lib artifact 
        uses: actions/download-artifact@master
        with:
          name: decentraland-godot-lib-aarch64-apple-darwin
          path: godot/lib/aarch64-apple-darwin
          
      - name: Download macos x86_64 lib artifact 
        uses: actions/download-artifact@master
        with:
          name: decentraland-godot-lib-x86_64-apple-darwin
          path: godot/lib/x86_64-apple-darwin

      - name: lipo macos
        run: lipo -create godot/lib/x86_64-apple-darwin/libdecentraland_godot_lib.dylib godot/lib/aarch64-apple-darwin/libdecentraland_godot_lib.dylib -output godot/lib/libdecentraland_godot_lib.dylib
          
      - name: export
        id: export
        # Use latest version (see releases for all versions)
        uses: firebelley/godot-export@v5.1.0
        with:
          # Defining all the required inputs
          godot_executable_download_url: https://downloads.tuxfamily.org/godotengine/4.0.3/Godot_v4.0.3-stable_linux.x86_64.zip
          godot_export_templates_download_url: https://downloads.tuxfamily.org/godotengine/4.0.3/Godot_v4.0.3-stable_export_templates.tpz
          relative_project_path: ./godot
          archive_output: true

      - uses: actions/upload-artifact@master
        with:
          name: decentraland-godot-export
          path: ${{ steps.export.outputs.archive_directory }}/*