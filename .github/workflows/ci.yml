on:
  push:
    branches:
      - main
  pull_request:
  release:
    types:
      - created

name: CI

jobs:
  # TODO: back later
  # lints:
  #   name: Check and lints
  #   runs-on: ubuntu-latest
  #   env:
  #     GODOT4_BIN: ${{ github.workspace }}/.bin/godot/godot4_bin
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: stable
  #         override: true
  #     - run: rustup component add rustfmt
  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #     - name: Install gdtoolkit 4
  #       run: pip3 install "gdtoolkit==4.*"
  #     - name: Check format GDScript
  #       run: gdformat -d godot/
  #     - name: cargo xtask install
  #       working-directory: rust
  #       run: cargo xtask install --no-templates
  #     - uses: actions-rs/cargo@v1
  #       name: cargo check
  #       with:
  #         command: check
  #         args: --manifest-path rust/Cargo.toml
  #     - uses: actions-rs/cargo@v1
  #       name: cargo fmt
  #       with:
  #         command: fmt
  #         args: --manifest-path rust/Cargo.toml --all -- --check
  #     - uses: actions-rs/cargo@v1
  #       name: cargo clippy
  #       with:
  #         command: clippy
  #         args: --manifest-path rust/Cargo.toml -- -D warnings

  # coverage:
  #   name: Coverage
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest]
  #       rust: [stable]
  #   runs-on: ${{ matrix.os }}
  #   env:
  #     GODOT4_BIN: ${{ github.workspace }}/.bin/godot/godot4_bin
  #   steps:
  #     - name: Checkout sources
  #       uses: actions/checkout@v2
          
  #     - name: Install stable toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: ${{ matrix.rust }}
  #         override: true
  #         components: llvm-tools-preview

  #     - name: Cache
  #       uses: actions/cache@v2
  #       with:
  #         path: |
  #           ~/.cargo/registry
  #           ~/.cargo/git
  #           rust/target
  #           rust/Cargo.lock
  #         key: coverage-cargo-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: coverage-cargo-
      
  #     - name: cargo xtask install
  #       working-directory: rust
  #       run: cargo xtask install --no-templates

  #     - name: Download grcov
  #       run: |
  #         mkdir -p "${HOME}/.local/bin"
  #         curl -sL https://github.com/mozilla/grcov/releases/download/v0.8.10/grcov-x86_64-unknown-linux-gnu.tar.bz2 | tar jxf - -C "${HOME}/.local/bin"
  #         echo "$HOME/.local/bin" >> $GITHUB_PATH

  #     - name: Run xtask coverage
  #       working-directory: rust
  #       run: cargo xtask coverage

  #     - name: Upload to codecov.io
  #       uses: codecov/codecov-action@v3
  #       with:
  #         files: rust/coverage/*.lcov

  build:
    name: Build and test
    # if: ${{ github.ref == 'refs/heads/main' }}
    strategy:
      matrix:
        # os: [windows-latest, ubuntu-latest]
        os: [macos-latest]
        rust: [stable]
    runs-on: ${{ matrix.os }}
    env:
      GODOT4_BIN: ${{ github.workspace }}/.bin/godot/godot4_bin
    continue-on-error: true
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rust/target/            
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
          
      - name: cargo xtask install
        working-directory: rust
        run: cargo xtask install

      - name: Set up target platform
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          rustup target add x86_64-apple-darwin 
          rustup target add aarch64-apple-darwin

      - uses: actions-rs/cargo@v1
        if: ${{ matrix.os != 'macos-latest' }}
        name: cargo build
        with:
          command: build
          args: --manifest-path rust/Cargo.toml --release

      - uses: actions-rs/cargo@v1
        name: build for x86_64 (macos)
        if: ${{ matrix.os == 'macos-latest' }}
        with:
          command: build
          args: --manifest-path rust/Cargo.toml --release --target=x86_64-apple-darwin
          
      - uses: actions-rs/cargo@v1
        name: build for arm64 (macos)
        if: ${{ matrix.os == 'macos-latest' }}
        with:
          command: build
          args: --manifest-path rust/Cargo.toml --release --target=aarch64-apple-darwin

      # - uses: actions-rs/cargo@v1
      #   name: cargo test
      #   with:
      #     command: test
      #     args: --manifest-path rust/Cargo.toml --release 

      - name: Make universal library
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          mkdir rust/target/release || true
          lipo -create rust/target/x86_64-apple-darwin/release/libdecentraland_godot_lib.dylib rust/target/aarch64-apple-darwin/release/libdecentraland_godot_lib.dylib -output rust/target/release/libdecentraland_godot_lib.dylib

      - name: Copy library (win)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
            cp rust/target/release/decentraland_godot_lib.dll godot/lib/
      - name: Copy library (unix)
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
            cp rust/target/release/libdecentraland_godot_lib.so godot/lib/ || true
            cp rust/target/release/libdecentraland_godot_lib.dylib godot/lib/ || true

      - name: Codesign library
        if: ${{ matrix.os == 'macos-latest' }}
        env: 
          MACOS_CSC_LINK: ${{ secrets.MACOS_CSC_LINK }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CSC_KEY_PASSWORD }}
        run: |
          echo "Creating temp password"
          tmp_password=$(head -c 32 /dev/urandom | base64)

          echo "Dumping cert"
          echo $MACOS_CSC_LINK | base64 --decode > certificate.p12
          ls -la certificate.p12

          echo "Downloading cert"
          curl -sL $MACOS_CSC_LINK -o tcertificate.p12 || true
          ls -la tcertificate.p12 || true

          echo "Creating keychain"
          security create-keychain -p $tmp_password build.keychain

          echo "Setting default keychain"
          security default-keychain -s build.keychain

          echo "Unlock keychain"
          security unlock-keychain -p $tmp_password build.keychain

          echo "Importing cert"
          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign

          echo "set-key-partition-list"
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $tmp_password build.keychain

          echo "running find identity"
          identity_id=$(security find-identity -v | grep -oE '1\) ([A-F0-9]{40})' | awk '{print $2}')

          echo "signing dcl library"
          /usr/bin/codesign --force -s $identity_id godot/lib/libdecentraland_godot_lib.dylib -v 

      - name: Export
        working-directory: rust
        env:
          GODOT_MACOS_CODESIGN_CERTIFICATE_FILE: certificate.p12
          GODOT_MACOS_CODESIGN_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CSC_KEY_PASSWORD }}
        run: cargo xtask export

      - name: Notarize MacOS (dmg)
        if: ${{ matrix.os == 'macos-latest' }}
        continue-on-error: true
        env:
          MACOS_NOTARIZATION_APPLE_ID: ${{secrets.MACOS_NOTARIZATION_APPLE_ID}}
          MACOS_NOTARIZATION_TEAM_ID: ${{secrets.MACOS_NOTARIZATION_TEAM_ID}}
          MACOS_NOTARIZATION_PWD: ${{secrets.MACOS_NOTARIZATION_PWD}}
        run: |
          # Store the notarization credentials to prevent the UI password dialog for blocking the CI
          echo "Create keychain profile"
          xcrun notarytool store-credentials "notary-profile" --apple-id "$MACOS_NOTARIZATION_APPLE_ID" --team-id "$MACOS_NOTARIZATION_TEAM_ID" --password "$MACOS_NOTARIZATION_PWD"

          # Send the notarization request to the Apple's Notarization service and wait for the result.
          echo "Notarize app"
          xcrun notarytool submit "decentraland.godot.macos.dmg" --keychain-profile "notary-profile" --wait

          # Attach the staple to the executable, this allow the app to be validated by macOS
          # even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "decentraland.godot.macos.dmg"

          # Validate the staple attached to the executable.
          echo "Validate staple"
          xcrun stapler validate "decentraland.godot.macos.dmg"

      - name: Copy the library to exports
        run: cp godot/lib/libdecentraland_godot_lib.dylib exports/libdecentraland_godot_lib.dylib

      - uses: actions/upload-artifact@master
        with:
          name: decentraland-godot-${{ matrix.os }}
          path: |
            exports/**/*
  
  # macos-sign:
  #   name: Test sign macos
  #   strategy:
  #     matrix:
  #       # os: [windows-latest, ubuntu-latest]
  #       os: [macos-latest]
  #       rust: [stable]
  #   runs-on: ${{ matrix.os }}
  #   env:
  #     GODOT4_BIN: ${{ github.workspace }}/.bin/godot/godot4_bin
  #   continue-on-error: true
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: create folder
  #       run: mkdir exports || true
  #     - name: download library
  #       run: curl -L -o exports/libdecentraland_godot_lib.dylib https://github.com/decentraland/godot-explorer/releases/download/v0.5.0-alpha/libdecentraland_godot_lib.dylib
  #     - name: Codesign executable
  #       env: 
  #         MACOS_CERTIFICATE: ${{ secrets.MACOS_CSC_LINK }}
  #         MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CSC_KEY_PASSWORD }}
  #       run: |
  #         mkdir exports || true
  #         echo "Creating temp password"
  #         tmp_password=$(head -c 32 /dev/urandom | base64)
  #         echo "Dumping cert"
  #         echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
  #         echo "Creating keychain"
  #         security create-keychain -p $tmp_password build.keychain
  #         echo "Setting default keychain"
  #         security default-keychain -s build.keychain
  #         echo "Unlock keychain"
  #         security unlock-keychain -p $tmp_password build.keychain
  #         echo "Importing cert"
  #         security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
  #         echo "set-key-partition-list"
  #         security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $tmp_password build.keychain
  #         echo "running find identity"
  #         identity_id=$(security find-identity -v | grep -oE '1\) ([A-F0-9]{40})' | awk '{print $2}')
  #         echo "signing dcl library"
  #         /usr/bin/codesign --force -s $identity_id ./exports/libdecentraland_godot_lib.dylib -v 
  #     - uses: actions/upload-artifact@master
  #       with:
  #         name: signed-decentraland-godot-${{ matrix.os }}
  #         path: |
  #           exports/**/*