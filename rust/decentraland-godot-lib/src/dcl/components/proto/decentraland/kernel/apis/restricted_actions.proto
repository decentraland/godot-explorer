syntax = "proto3";
package decentraland.kernel.apis;

import "decentraland/common/vectors.proto";

message MovePlayerToRequest {
  decentraland.common.Vector3 new_relative_position = 1;
  optional decentraland.common.Vector3 camera_target = 2;
}

message TeleportToRequest {
  decentraland.common.Vector2 world_coordinates = 1;
}

message TriggerEmoteRequest {
  string predefined_emote = 1;
}

message ChangeRealmRequest {
  string realm = 1;
  optional string message = 2;
}

message OpenExternalUrlRequest {
  string url = 1;
}

message OpenNftDialogRequest {
  string urn = 1;
}

message UnblockPointerRequest {}

message CommsAdapterRequest {
  string connection_string = 1;
}

message SuccessResponse {
  bool success = 1;
}

message TriggerEmoteResponse { }

message MovePlayerToResponse { }

message TeleportToResponse { }

service RestrictedActionsService {
  // MovePlayerTo will move the player in a position relative to the current scene
  rpc MovePlayerTo(MovePlayerToRequest) returns (MovePlayerToResponse) {}

  // TeleportTo will move the user to the specified world LAND parcel coordinates
  rpc TeleportTo(TeleportToRequest) returns (TeleportToResponse) {}

  // TriggerEmote will trigger an emote in this current user
  rpc TriggerEmote(TriggerEmoteRequest) returns (TriggerEmoteResponse) {}

  // ChangeRealm prompts the user to change to a specific realm
  rpc ChangeRealm(ChangeRealmRequest) returns (SuccessResponse) {}

  // OpenExternalUrl prompts the user to open an external link
  rpc OpenExternalUrl(OpenExternalUrlRequest) returns (SuccessResponse) {}

  // OpenNftDialog opens an NFT dialog.
  rpc OpenNftDialog(OpenNftDialogRequest) returns (SuccessResponse) {}

  // Asks the explorer to connect to other communications adapter, this feature
  // can be used to join private game servers
  rpc SetCommunicationsAdapter(CommsAdapterRequest) returns (SuccessResponse) {}
}
