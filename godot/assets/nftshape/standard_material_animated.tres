[gd_resource type="Shader" format=3 uid="uid://w70xrdn8yp8r"]

[resource]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.3.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;
uniform int rows = 4;
uniform int columns = 4;
uniform float fps = 10.0f;

void vertex() {
    // Total number of frames
    int total_frames = rows * columns;

    // Calculate the current frame
    int current_frame = int(TIME * fps) % total_frames;

    // Calculate UV coordinates for current frame
    float frame_width = 1.0 / float(columns);
    float frame_height = 1.0 / float(rows);
    int row = current_frame / columns;
    int column = current_frame % columns;
    vec2 frame_offset = vec2(float(column) * frame_width, float(row) * frame_height);

	UV = UV * vec2(frame_width, frame_height) + frame_offset;
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	ALPHA *= albedo.a * albedo_tex.a;
}
"
